global {
  # Bind to LAN and/or WAN as you want. Replace the interface name to your own.
  #lan_interface: docker0
  wan_interface: auto # Use "auto" to auto detect WAN interface.

  log_level: info
  allow_insecure: true
  auto_config_kernel_parameter: true
  #auto_config_firewall_rule: true

  ##### Node connectivity check.

  # Host of URL should have both IPv4 and IPv6 if you have double stack in local.
  # First is URL, others are IP addresses if given.
  # Considering traffic consumption, it is recommended to choose a site with anycast IP and less response.
  tcp_check_url: 'http://detectportal.firefox.com,1.1.1.1'

  # TLS implementation. tls is to use Go's crypto/tls. utls is to use uTLS, which can imitate browser's Client Hello.
  tls_implementation: tls

  # The Client Hello ID for uTLS to imitate. This takes effect only if tls_implementation is utls.
  # See more: https://github.com/daeuniverse/dae/blob/331fa23c16/component/outbound/transport/tls/utls.go#L17
  utls_imitate: chrome_auto
}

node {
  # Fill in your subscription links here.
  #node1: 'vless://UsmYRLWWDQMHRLdMDwHnaEWL@104.18.225.52:443/?type=ws&encryption=none&host=zuccwcny45vo.ardianeka.my.id&path=%2Fxray-vless-ws%2FC6schw82dGQ79Jdb114kd2ua&security=tls&sni=zuccwcny45vo.ardianeka.my.id#xray-vless-ws'
}

subscription {
  # Add your subscription links here.
  'https://speedvpn.ardianeka.my.id/api/config/eekrain@yHYE4JiPcV/universal?secret=LtgQA7lzC35XZ7pdli'
  'https://speedvpn.ardianeka.my.id/api/config/eekrain@3v3LsoogFX/universal?secret=LtgQA7lzC35XZ7pdli'
}

# See https://github.com/daeuniverse/dae/blob/main/docs/en/configuration/dns.md for full examples.
dns {
  upstream {
    cfdns: 'udp://one.one.one.one:53'
  }
  
  routing {
    request {
      fallback: cfdns
    }
  }
}

group {
  proxy {
    policy: min_moving_avg
  }
}

# See https://github.com/daeuniverse/dae/blob/main/docs/en/configuration/routing.md for full examples.
routing {
  pname(NetworkManager) -> direct
  dip(224.0.0.0/3, 'ff00::/8') -> direct
  dip(geoip:private) -> direct
  l4proto(udp) && dport(443) -> block

  ### Write your rules below.
  fallback: proxy
  #sport(22) -> direct
  #dport(22) -> direct
}